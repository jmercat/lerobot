# @package _global_

# Use `act_koch_real.yaml` to train on real-world datasets collected on Alexander Koch's robots.
# Compared to `act.yaml`, it contains 2 cameras (i.e. laptop, phone) instead of 1 camera (i.e. top).
# Also, `training.eval_freq` is set to -1. This config is used to evaluate checkpoints at a certain frequency of training steps.
# When it is set to -1, it deactivates evaluation. This is because real-world evaluation is done through our `control_robot.py` script.
# Look at the documentation in header of `control_robot.py` for more information on how to collect data , train and evaluate a policy.
#
# Example of usage for training:
# ```bash
# python lerobot/scripts/train.py \
#   policy=act_koch_real \
#   env=koch_real
# ```

seed: 1000
dataset_repo_id: jmercat/koch_feed_cat


training:
  offline_steps: 8000
  online_steps: 0
  eval_freq: -1
  save_freq: 800
  log_freq: 100
  save_checkpoint: true


  batch_size: 8
  lr_scheduler: cosine
  lr: 1e-5
  lr_backbone: 1e-5
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 0.001
  weight_decay: 1e-4
  grad_clip_norm: 10
  online_steps_between_rollouts: 1


  delta_timestamps:
    action: "[i / ${fps} for i in range(${policy.chunk_size})]"

eval:
  n_episodes: 5
  batch_size: 5

# See `configuration_act.py` for more details.
policy:
  name: mbm

  n_obs_steps: 1
  chunk_size: 100
  n_action_steps: 100
  freeze_pretrained: true

  input_shapes:
    observation.images.phone: [3, 480, 640]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  open_lm_config:
    [ 
      "--model", "79m",
      "--torchcompile",
      "--qk-norm",
    ]
