# @package _global_

seed: 1000
dataset_repo_id: jmercat/koch_feed_cat

training:
  offline_steps: 8000
  online_steps: 0
  eval_freq: -1
  save_freq: 800
  save_checkpoint: true

  batch_size: 64
  grad_clip_norm: 10
  lr: 1.0e-4
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 1.0e-6
  online_steps_between_rollouts: 1

  delta_timestamps:
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.horizon})]"
  
eval:
  n_episodes: 5
  batch_size: 5

policy:
  name: diffusion

  n_obs_steps: 1
  horizon: 16
  n_action_steps: 8

  input_shapes:
    # observation.images.laptop: [3, 480, 640]
    observation.images.phone: [3, 480, 640]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    # observation.images.laptop: mean_std
    observation.images.phone: mean_std
    observation.state: mean_std
  output_normalization_modes:
    action: mean_std

  # Architecture / modeling.
  # Vision backbone.
  vision_backbone: resnet18
  crop_shape: [432, 576]
  crop_is_random: True
  pretrained_backbone_weights: ResNet18_Weights.IMAGENET1K_V1
  use_group_norm: False
  spatial_softmax_num_keypoints: 32

  # Unet.
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  diffusion_step_embed_dim: 128
  use_film_scale_modulation: True

  # Noise scheduler.
  noise_scheduler_type: DDPM
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon # epsilon / sample
  clip_sample: True
  clip_sample_range: 1.0
  # Inference
  num_inference_steps: null  # if not provided, defaults to `num_train_timesteps`

  # Loss computation
  do_mask_loss_for_padding: false